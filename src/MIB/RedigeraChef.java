/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package MIB;

import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JOptionPane;
import oru.inf.InfDB;
import oru.inf.InfException;

/**
 *
 * @author Adam
 */
public class RedigeraChef extends javax.swing.JFrame {
    
    private InfDB idb;

    /**
     * Creates new form RedigeraChef
     */
    public RedigeraChef(InfDB idb) {
        initComponents();
        setLocationRelativeTo(null);
        this.idb = idb;
        laddaAgenter();
        laddaOmraden();
        laddaKontor();
        jLvaljAgent.setVisible(false);
        cbxAgenter.setVisible(false);
        cbxOmrade.setVisible(false);
        jLomrade.setVisible(false);
        btnOmradesChefBekrafta.setVisible(false);
        cbxKontor.setVisible(false);
        jLkontor.setVisible(false);
        btnKontorsChefBekräfta.setVisible(false);
        jLvarning.setVisible(false);
        jLvarning2.setVisible(false);
        jLinfo.setVisible(false);
        nuvKontorInfo.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLtitel = new javax.swing.JLabel();
        btnOmrade = new javax.swing.JToggleButton();
        btnKontor = new javax.swing.JToggleButton();
        jLvaljAgent = new javax.swing.JLabel();
        cbxAgenter = new javax.swing.JComboBox<>();
        jLomrade = new javax.swing.JLabel();
        cbxOmrade = new javax.swing.JComboBox<>();
        cbxKontor = new javax.swing.JComboBox<>();
        jLkontor = new javax.swing.JLabel();
        btnOmradesChefBekrafta = new javax.swing.JToggleButton();
        btnKontorsChefBekräfta = new javax.swing.JToggleButton();
        jLvarning = new javax.swing.JLabel();
        jLvarning2 = new javax.swing.JLabel();
        nuvKontorInfo = new javax.swing.JLabel();
        jLinfo = new javax.swing.JLabel();
        btnTillbaka = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLtitel.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLtitel.setText("Ändra vilken agent som är områdeschef eller kontorschef");

        btnOmrade.setText("Ändra Områdeschef");
        btnOmrade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOmradeActionPerformed(evt);
            }
        });

        btnKontor.setText("Ändra Kontorschef");
        btnKontor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKontorActionPerformed(evt);
            }
        });

        jLvaljAgent.setText("Välj Agent:");

        cbxAgenter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbxAgenter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxAgenterActionPerformed(evt);
            }
        });

        jLomrade.setText("Område:");

        cbxOmrade.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cbxKontor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLkontor.setText("Kontor:");

        btnOmradesChefBekrafta.setText("Bekräfta");
        btnOmradesChefBekrafta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOmradesChefBekraftaActionPerformed(evt);
            }
        });

        btnKontorsChefBekräfta.setText("Bekräfta");
        btnKontorsChefBekräfta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKontorsChefBekräftaActionPerformed(evt);
            }
        });

        jLvarning.setForeground(new java.awt.Color(255, 0, 0));
        jLvarning.setText("Kom ihåg att en agent kan bara vara chef för ETT kontor och ETT område samtidigt!");

        jLvarning2.setForeground(new java.awt.Color(255, 0, 0));
        jLvarning2.setText("Vid ändring kommer den chefen tas bort från eventuell tidigare chefs roll");

        jLinfo.setText("Siffran bredvid kontorsnamnet är ID på agenten som är chef just nu");

        btnTillbaka.setText("Tillbaka");
        btnTillbaka.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTillbakaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(btnOmrade, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLomrade, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLvaljAgent, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLkontor, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnKontor, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(97, 97, 97))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(cbxKontor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(cbxAgenter, 0, 128, Short.MAX_VALUE)
                                            .addComponent(cbxOmrade, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addComponent(btnKontorsChefBekräfta, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(btnOmradesChefBekrafta, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(0, 0, Short.MAX_VALUE)))
                                    .addGap(217, 217, 217))))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLtitel)
                            .addGap(58, 58, 58)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLvarning, javax.swing.GroupLayout.PREFERRED_SIZE, 469, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nuvKontorInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLvarning2, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLinfo, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(64, 64, 64))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnTillbaka, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLtitel)
                .addGap(61, 61, 61)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOmrade)
                    .addComponent(btnKontor))
                .addGap(18, 18, 18)
                .addComponent(jLvarning)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLvarning2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLvaljAgent)
                    .addComponent(cbxAgenter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLomrade)
                    .addComponent(cbxOmrade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLkontor)
                    .addComponent(cbxKontor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addComponent(btnOmradesChefBekrafta)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnKontorsChefBekräfta)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                .addComponent(jLinfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nuvKontorInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(btnTillbaka)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbxAgenterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxAgenterActionPerformed

    }//GEN-LAST:event_cbxAgenterActionPerformed

    private void btnOmradeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOmradeActionPerformed
        // TODO add your handling code here:
        jLvarning.setVisible(true);
        jLvarning2.setVisible(true);
        jLvaljAgent.setVisible(true);
        cbxAgenter.setVisible(true);
        cbxOmrade.setVisible(true);
        jLomrade.setVisible(true);
        btnOmradesChefBekrafta.setVisible(true);
        btnOmradesChefBekrafta.setEnabled(true);
        cbxKontor.setVisible(false);
        jLkontor.setVisible(false);
        btnKontorsChefBekräfta.setVisible(false);
        btnKontorsChefBekräfta.setEnabled(false);
        
        
        
    }//GEN-LAST:event_btnOmradeActionPerformed

    private void btnKontorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKontorActionPerformed
        // TODO add your handling code here:
        jLinfo.setVisible(true);
        jLvarning.setVisible(true);
        jLvarning2.setVisible(true);
        jLvaljAgent.setVisible(true);
        cbxAgenter.setVisible(true);
        cbxKontor.setVisible(true);
        jLkontor.setVisible(true);
        btnKontorsChefBekräfta.setVisible(true);
        btnKontorsChefBekräfta.setEnabled(true);
        cbxOmrade.setVisible(false);
        jLomrade.setVisible(false);
        btnOmradesChefBekrafta.setVisible(false);
        btnOmradesChefBekrafta.setEnabled(false);
    }//GEN-LAST:event_btnKontorActionPerformed

    private void btnOmradesChefBekraftaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOmradesChefBekraftaActionPerformed
        
        //får ut id och namn från valt område i combo boxen
        Object ovalIcbx = cbxOmrade.getSelectedItem();
        String valOmrade = ovalIcbx.toString();
        String[] omrade = valOmrade.split("-");
        String omradesid = omrade[0];
        String omradesnamn = omrade[1];
        
        
        //får ut vald agent id och namn från comboboxen
        Object avalIcbx = cbxAgenter.getSelectedItem();
        String valAgent = avalIcbx.toString();
        String[] agent = valAgent.split("-");
        String agentid = agent[0];
        String agentnamn = agent[1];
        
        
        //sqlfråga tar reda på vem som är nuvarande chef för valt område ifall det finns en chef
        String fraga1 = "SELECT omradeschef.`Agent_ID` FROM omrade JOIN omradeschef on omrade.`Omrades_ID` = omradeschef.`Omrade` JOIN agent on omradeschef.`Agent_ID`=agent.`Agent_ID` WHERE omrade.omrades_id = "+omradesid;
        
        //fråga för att uppdatera chefen i områdeschef tabellen ifall det redan finns en tidigare chef
        String fraga2 = "UPDATE omradeschef SET Agent_ID = "+agentid+" WHERE Omrade = "+omradesid;
        
        //insert ifall det inte finns en chef för det området redan
        String fraga3 = "INSERT INTO omradeschef VALUES("+agentid+", "+omradesid+")";
        
        //ta reda på ifall agenten redan är chef för ett område, får bara va chef för ett område
        String fraga4 = "SELECT COUNT(Omrade) FROM omradeschef WHERE Agent_ID = "+agentid;
        
        //Tar bort agenten från nuvarande chefsområde för att uppdatera till nya
        String fraga5 = "DELETE FROM omradeschef WHERE Agent_ID = "+agentid;
        
        try{
            String arChef = idb.fetchSingle(fraga4);
            int arChefint = Integer.parseInt(arChef);
            
            String namn = agentnamn;
            String omrnamn = omradesnamn;
            
            //ifall agenten man vill lägga till redan finns som chef över annat område
            if(arChefint >0){
                //ta bort den agentens id ur områdeschef
                idb.delete(fraga5);
            }
            
            String svarOmChef = idb.fetchSingle(fraga1);
            
            //ifall det redan finns en chef (alltså redan finns platsid egenligen)
            if(svarOmChef != null){
                //uppdaterar befinliga agentid kopplat till den platsen
                idb.update(fraga2);
                JOptionPane.showMessageDialog(null, "Uppdaterat! Chef för området " + omrnamn +" är nu "+namn);
            }
            else{
                
                // ifall det inte finns någon chef över området så läggs det till istället
                idb.insert(fraga3);
                JOptionPane.showMessageDialog(null,"Tillagt! Chef för området " + omrnamn +" är nu "+namn);
            }
            
        }catch(InfException ex){
            JOptionPane.showMessageDialog(null,"Något gick fel");
            System.out.println("Internt felmed: "+ex.getMessage());
        }catch(Exception e){
            System.out.println("Int fel"+e);
        }   
    }//GEN-LAST:event_btnOmradesChefBekraftaActionPerformed

    
    
    
    
    
    private void btnKontorsChefBekräftaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKontorsChefBekräftaActionPerformed
       
        nuvKontorInfo.setVisible(false);
        
        
        //får ut vald agent id och namn från comboboxen
        Object avalIcbx = cbxAgenter.getSelectedItem();
        String valAgent = avalIcbx.toString();
        String[] agent = valAgent.split("-");
        String agentid = agent[0];
        String agentnamn = agent[1];
        
        //får ut valet ur cbx
        Object kvalIcbx = cbxKontor.getSelectedItem();
        String valKontor = kvalIcbx.toString();
        String[] kontor = valKontor.split("-");
        String nuvAgent = kontor[0];
        String beteckning = kontor[1];
        
        //sql fråga 1 för att uppdatera kontorschef
        String fraga1 = "UPDATE kontorschef SET Agent_ID = "+agentid+" WHERE kontorsbeteckning = '"+beteckning+"'";
        
        //fråga för att se att agenten inte redan är kontorschef
        String fraga2 = "SELECT COUNT(Kontorsbeteckning) FROM kontorschef WHERE Agent_ID = "+agentid;
        
        //sql fråga för som används för kontroll att man inte fösöker sätta nuvarande chef som ny chef för samma
        String fraga3 = "SELECT kontorsbeteckning FROM kontorschef WHERE Agent_ID = "+agentid;
        
        
        
        try{
            
            //kontroll ifall personen är nuvarande chef
            String arChef = idb.fetchSingle(fraga2);
            int arChefint = Integer.parseInt(arChef);
            
            //vilket det nuvarande kontoret för agenten är
            String nuvarandeKontor = idb.fetchSingle(fraga3);
            
            //kontroll för att kommande villkor ska fungera, .equals fungerar inte ifall idb returnerar null
            if(nuvarandeKontor == null){
                nuvarandeKontor ="ö";
            }
            
            //kontroll att man inte försöker sätta nuvarande chef som ny chef för samma ställe
            if(nuvarandeKontor.equals(beteckning)){
                JOptionPane.showMessageDialog(null,"Agenten är redan chef över det kontoret");
            }else{
            
                 //kontroll att personen inte redan är chef
                if(arChefint<1){
                    idb.update(fraga1);
                    JOptionPane.showMessageDialog(null, "Uppdaterat! Chef för kontoret " + beteckning+" är nu "+agentnamn);
                }else{
                    JOptionPane.showMessageDialog(null,"Du måste tilldela någon till kontoret som agent "+ agentnamn + " är chef över innan du kan tilldela agenten till ett annat kontor!");
                    nuvKontorInfo.setText("Agent: "+agentnamn + " är just nu chef över: "+nuvarandeKontor);
                }
                laddaKontor();
            }  
            
        }catch(InfException ex){
            JOptionPane.showMessageDialog(null,"Något gick fel");
            System.out.println("Internt felmed: "+ex.getMessage());
        }
    }//GEN-LAST:event_btnKontorsChefBekräftaActionPerformed

    private void btnTillbakaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTillbakaActionPerformed
        // TODO add your handling code here:
        new AgentAdminFonster(idb).setVisible(true);
        dispose();
    }//GEN-LAST:event_btnTillbakaActionPerformed


    private void laddaKontor()
    {
        try{
            ArrayList<HashMap<String, String>> kontor = idb.fetchRows("SELECT * FROM kontorschef");
            cbxKontor.removeAllItems();
            for(HashMap<String, String> ettKontor : kontor){
                String agent = ettKontor.get("Agent_ID");
                String beteckning = ettKontor.get("Kontorsbeteckning");
                cbxKontor.addItem(agent+"-"+beteckning);
                
            }
        }catch(InfException ex){
            JOptionPane.showMessageDialog(null, "Något gick fel");
            System.out.println("Internt felmed:"+ex.getMessage());
        }
    }
    
    
  private void laddaAgenter() {
        try {
            ArrayList<HashMap<String, String>> agentlist = idb.fetchRows("SELECT Agent_ID, Namn FROM agent");
            cbxAgenter.removeAllItems();
            for(HashMap<String, String> agent : agentlist) {
                String agentid = agent.get("Agent_ID");
                String namn = agent.get("Namn");
                cbxAgenter.addItem(agentid+"-"+namn);
            }
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Ett fel uppstod.");
        }
    }
  
      private void laddaOmraden(){
        try{
            ArrayList<HashMap<String, String>> omradeList = idb.fetchRows("SELECT * FROM omrade");
            cbxOmrade.removeAllItems();
            for(HashMap<String, String> omrade : omradeList)
            {
                String omradeid = omrade.get("Omrades_ID");
                String namn = omrade.get("Benamning");
                cbxOmrade.addItem(omradeid+"-"+namn);
            }
        }catch(InfException ex){
            JOptionPane.showMessageDialog(null, "Något gick fel");
            System.out.println("Internt felmed:"+ex.getMessage());
        }
    }
      


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnKontor;
    private javax.swing.JToggleButton btnKontorsChefBekräfta;
    private javax.swing.JToggleButton btnOmrade;
    private javax.swing.JToggleButton btnOmradesChefBekrafta;
    private javax.swing.JToggleButton btnTillbaka;
    private javax.swing.JComboBox<String> cbxAgenter;
    private javax.swing.JComboBox<String> cbxKontor;
    private javax.swing.JComboBox<String> cbxOmrade;
    private javax.swing.JLabel jLinfo;
    private javax.swing.JLabel jLkontor;
    private javax.swing.JLabel jLomrade;
    private javax.swing.JLabel jLtitel;
    private javax.swing.JLabel jLvaljAgent;
    private javax.swing.JLabel jLvarning;
    private javax.swing.JLabel jLvarning2;
    private javax.swing.JLabel nuvKontorInfo;
    // End of variables declaration//GEN-END:variables
}
