/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package MIB;

import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JOptionPane;
import oru.inf.InfDB;
import oru.inf.InfException;

/**
 *klass som listar de tre agenter som är ansvarig agent för flest aliens
 * 
 * @author adamrosing
 */
public class Top3AnsvarigaAgenter extends javax.swing.JFrame {

    private InfDB idb;
    /**
     * Creates new form Top3AnsvarigaAgenter
     */
    public Top3AnsvarigaAgenter(InfDB idb) {
        initComponents();
        this.idb = idb;
        setLocationRelativeTo(null);
        laddaOmraden();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnTillbaka = new javax.swing.JToggleButton();
        jLtitel = new javax.swing.JLabel();
        jLValjomrade = new javax.swing.JLabel();
        cbxOmraden = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtaAgenter = new javax.swing.JTextArea();
        btnSok = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnTillbaka.setText("Tillbaka");
        btnTillbaka.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTillbakaActionPerformed(evt);
            }
        });

        jLtitel.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLtitel.setText("Lista top 3 agenter med mest ansvar över aliens per område ");

        jLValjomrade.setText("Välj område:");

        cbxOmraden.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        txtaAgenter.setColumns(20);
        txtaAgenter.setRows(5);
        jScrollPane1.setViewportView(txtaAgenter);

        btnSok.setText("Sök");
        btnSok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSokActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 43, Short.MAX_VALUE)
                        .addComponent(jLtitel)
                        .addGap(33, 33, 33))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnTillbaka)
                        .addGap(81, 81, 81)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLValjomrade)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnSok)
                                    .addComponent(cbxOmraden, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLtitel)
                .addGap(74, 74, 74)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLValjomrade)
                    .addComponent(cbxOmraden, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(btnSok)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(78, 78, 78)
                .addComponent(btnTillbaka)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnTillbakaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTillbakaActionPerformed
        // TODO add your handling code here:
        new AgentFonster(idb).setVisible(true);
        dispose();
    }//GEN-LAST:event_btnTillbakaActionPerformed

    private void btnSokActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSokActionPerformed
        
        try{
            
            txtaAgenter.setText("");
            //hämtar valt områdes id
            String valtOmrade = getOmradesId();
            
            //ifall cboxen står kvar på välj
            if(cbxOmraden.getSelectedItem().toString().equals("Välj")){
                JOptionPane.showMessageDialog(null,"Du måste välja område för att kunna söka");
            }else{
                //sql fråga, count för att räkna antalet aliens som de ansvarar över, namn för agenten, benämning för område
                //söker på områdes id och grupperar efter agent namn och ordnar efter count i fallande ordning med gräns på 3 rader
                String fraga = "SELECT count(ansvarig_agent), agent.namn, omrade.benamning FROM Alien JOIN Agent on alien.Ansvarig_Agent= agent.Agent_ID JOIN plats on alien.Plats=plats.Plats_ID JOIN Omrade ON plats.Finns_I=omrade.Omrades_ID WHERE omrades_id = "+valtOmrade+" group by agent.Namn ORDER BY count(ansvarig_agent) DESC LIMIT 3";
                
                //hämtar rader
                ArrayList<HashMap<String, String>> statistikInfo = idb.fetchRows(fraga);
                
                //kontroll att mapen inte är tom, men kommer inte vad det pga områdebenämning men bra med validering
                if(!statistikInfo.isEmpty()){
                    
                    int i = 0;
                    //loopar igenom resultatet
                    for(HashMap<String, String> rad : statistikInfo){
                        String count = rad.get("count(ansvarig_agent)");
                        String namn = rad.get("Namn");
                        String omrade = rad.get("benamning");
                        i++;
                        txtaAgenter.append(i+". "+namn +" antal aliens: "+count+"\n");   
                    }   
                }else{
                    txtaAgenter.append("Ingen information!");
                } 
            }   
        }catch(InfException ex){
            JOptionPane.showMessageDialog(null,"Något gick fel");
            System.out.println("Internt felmed: "+ex.getMessage());
        }
    }//GEN-LAST:event_btnSokActionPerformed


    //metod för att fylla comboboxen med dem områden som finns så den inloggade
    //inte behöver söka manuellt
    private void laddaOmraden()
    {
        try{
            //sql fraga
            String fraga = "SELECT Omrades_ID, Benamning FROM Omrade";
            
            //tömmer comboboxen 
            cbxOmraden.removeAllItems();
            cbxOmraden.addItem("Välj");
            
            //hämtar omrades id och benamning
            ArrayList<HashMap<String, String>> omraden = idb.fetchRows(fraga);
            
            //loopar genom resultatet och hämtar ut alla hittade värden
            for(HashMap<String, String> rad : omraden)
            {
                String omrID = rad.get("Omrades_ID");
                String namn = rad.get("Benamning");
                
                //lägger till det värdet som hittas i comboboxen
                cbxOmraden.addItem(omrID+"-"+namn);
            }
        } catch(InfException ex){
            JOptionPane.showMessageDialog(null,"Något gick fel");
            System.out.println("Internt felmeddelande: "+ex.getMessage());
        }catch (Exception e){
            System.out.println("Internt felmed:"+e);
        }
    }
    
    
    private String getOmradesId()
    {
        String omrade = cbxOmraden.getSelectedItem().toString();
        String[] omradeInfo = omrade.split("-");
        String id = omradeInfo[0];
        return id;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnSok;
    private javax.swing.JToggleButton btnTillbaka;
    private javax.swing.JComboBox<String> cbxOmraden;
    private javax.swing.JLabel jLValjomrade;
    private javax.swing.JLabel jLtitel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtaAgenter;
    // End of variables declaration//GEN-END:variables
}
