/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package MIB;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JOptionPane;
import oru.inf.InfDB;
import oru.inf.InfException;

/**
 *
 * @author adamrosing
 */
public class RedigeraAlien extends javax.swing.JFrame {

    
    private InfDB idb;
    /**
     * Creates new form RegAlien
     */
    public RedigeraAlien(InfDB idb) {
        initComponents();
        this.idb = idb;
        
        //laddar alla cboxar
        laddaAliens();
        laddaPlatser();
        laddaAgenter();
        
        setLocationRelativeTo(null);
        
        //kan inte redigera epost och inforutor om nuvarande värden
        txtfEpost.setEditable(false);
        txtfNuvRas.setEditable(false);
        txtfNuvAnsAgent.setEditable(false);
        txtfNuvPlats.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLtitel = new javax.swing.JLabel();
        jLvaljAlien = new javax.swing.JLabel();
        cbxAlien = new javax.swing.JComboBox<>();
        jLepost = new javax.swing.JLabel();
        txtfEpost = new javax.swing.JTextField();
        jLnamn = new javax.swing.JLabel();
        txtfNamn = new javax.swing.JTextField();
        jLlosen = new javax.swing.JLabel();
        txtfLosen = new javax.swing.JTextField();
        jLtelefon = new javax.swing.JLabel();
        txtfTelefon = new javax.swing.JTextField();
        jLplats = new javax.swing.JLabel();
        cbxPlatser = new javax.swing.JComboBox<>();
        jLansAgent = new javax.swing.JLabel();
        cbxAnsvarigAgent = new javax.swing.JComboBox<>();
        jLras = new javax.swing.JLabel();
        cbxRas = new javax.swing.JComboBox<>();
        attributRas = new javax.swing.JLabel();
        txtfRasAttribut = new javax.swing.JTextField();
        btnHamtaInfo = new javax.swing.JToggleButton();
        jLnuvPlats = new javax.swing.JLabel();
        txtfNuvPlats = new javax.swing.JTextField();
        jLnuvAnsA = new javax.swing.JLabel();
        txtfNuvAnsAgent = new javax.swing.JTextField();
        jLtelefon1 = new javax.swing.JLabel();
        txtfDatum = new javax.swing.JTextField();
        jLnuvRas = new javax.swing.JLabel();
        txtfNuvRas = new javax.swing.JTextField();
        btnBekrafta = new javax.swing.JToggleButton();
        btnTillbaka = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLtitel.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLtitel.setText("Redigera alien:");

        jLvaljAlien.setText("Välj alien:");

        cbxAlien.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLepost.setText("E-post:");

        jLnamn.setText("Namn:*");

        jLlosen.setText("Lösenord:*");

        jLtelefon.setText("Telefon:*");

        jLplats.setText("Plats:");

        cbxPlatser.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLansAgent.setText("Ansvarig agent:");

        cbxAnsvarigAgent.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLras.setText("Ras:");

        cbxRas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Välj", "Squid", "Worm", "Boglodite" }));
        cbxRas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxRasActionPerformed(evt);
            }
        });

        btnHamtaInfo.setText("Hämta info");
        btnHamtaInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHamtaInfoActionPerformed(evt);
            }
        });

        jLnuvPlats.setText("Nuvarande plats:");

        jLnuvAnsA.setText("Ansvarig agent nu:");

        jLtelefon1.setText("Registreringsdatum:*");

        jLnuvRas.setText("Nuvarande ras:");

        btnBekrafta.setText("Bekräfta");
        btnBekrafta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBekraftaActionPerformed(evt);
            }
        });

        btnTillbaka.setText("Tillbaka");
        btnTillbaka.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTillbakaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(129, 129, 129)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLtelefon1)
                            .addComponent(jLras)
                            .addComponent(jLansAgent)
                            .addComponent(jLplats)
                            .addComponent(jLtelefon)
                            .addComponent(jLlosen)
                            .addComponent(jLnamn)
                            .addComponent(jLepost)
                            .addComponent(jLvaljAlien)
                            .addComponent(attributRas, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cbxAlien, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtfEpost)
                                    .addComponent(txtfNamn)
                                    .addComponent(txtfLosen)
                                    .addComponent(txtfTelefon)
                                    .addComponent(cbxPlatser, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cbxAnsvarigAgent, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cbxRas, 0, 155, Short.MAX_VALUE)
                                    .addComponent(txtfDatum)
                                    .addComponent(txtfRasAttribut, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnHamtaInfo)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLnuvAnsA)
                                            .addComponent(jLnuvRas, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLnuvPlats, javax.swing.GroupLayout.Alignment.TRAILING))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtfNuvRas, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtfNuvPlats, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtfNuvAnsAgent, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(58, 58, 58)
                                .addComponent(jLtitel))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(317, 317, 317)
                        .addComponent(btnBekrafta))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnTillbaka)))
                .addContainerGap(99, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLtitel)
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLvaljAlien)
                    .addComponent(cbxAlien, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnHamtaInfo))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLepost)
                    .addComponent(txtfEpost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLnamn)
                    .addComponent(txtfNamn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLlosen)
                    .addComponent(txtfLosen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLtelefon)
                    .addComponent(txtfTelefon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLtelefon1)
                    .addComponent(txtfDatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLplats)
                    .addComponent(cbxPlatser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLnuvPlats)
                    .addComponent(txtfNuvPlats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLansAgent)
                    .addComponent(cbxAnsvarigAgent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLnuvAnsA)
                    .addComponent(txtfNuvAnsAgent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLras)
                    .addComponent(cbxRas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLnuvRas)
                    .addComponent(txtfNuvRas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtfRasAttribut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(attributRas, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(btnBekrafta)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnTillbaka)
                .addContainerGap(7, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnHamtaInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHamtaInfoActionPerformed
        // TODO add your handling code here:
        
        //kontroll för att en alien är vald i cboxen 
        if(cbxAlien.getSelectedItem().toString().equals("Välj")){
            JOptionPane.showMessageDialog(null,"Välj alien för att hämta information");
        }else{
            //hämta info om alien och fyllt textrutorna
            hamtaAlienInfo();
        }
        
    }//GEN-LAST:event_btnHamtaInfoActionPerformed

    private void cbxRasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxRasActionPerformed
        // TODO add your handling code here:
        //ändrar beskrivande text för attribut som hör ihop med vald ras
        laddaRasAttribut();
    }//GEN-LAST:event_cbxRasActionPerformed

    private void btnBekraftaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBekraftaActionPerformed
        // TODO add your handling code here:
        
        //hämtar värden i textrutor till lokala variabler
        String namn = txtfNamn.getText();
        String losen = txtfLosen.getText();
        String telefon = txtfTelefon.getText();
        String datum = txtfDatum.getText();
        
        try{
            
            //hämtar id för vald alien i cboxen
            String alienid = getAlienId();
            
            //obligatoriska rutor är fyllda, lösen inte längre än 6 tecken och namn innehåller bokstav
            if(Validering.isTxtFilled(namn)&& Validering.isTxtFilled(losen)&&Validering.isTxtFilled(datum)&&Validering.containsAlphabet(namn)&&Validering.godkanndLosenLangd(losen)){
                
                //kontrollerar form på registreringsdatum att det är korrekt via metod
                if(datumValidering(datum)){
                    String uptDatum = "UPDATE Alien SET Registreringsdatum = '"+datum+"' WHERE Alien_ID = "+alienid;
                    idb.update(uptDatum);
                    System.out.println("datum updt");
                
                }
                
                //kontrollerar form på telefonnummer att det är korrekt via metod
                if(telValidering(telefon)){
                    String uptTelefon = "UPDATE Alien SET Telefon = '"+telefon+"' WHERE Alien_ID = "+alienid;
                    idb.update(uptTelefon);
                    System.out.println("telefon updt");
                }
                
                
                //hämtar agent id från val för ansvarig agent från cboxen
                String ansAgent = cbxAnsvarigAgent.getSelectedItem().toString();
                String[] deladAgent = ansAgent.split("-");
                String agentid = deladAgent[0];
                
                //ifall inget är valt händer ingenting
                if(ansAgent.equals("Välj")){
                    System.out.println("Ingen ändring agent");
                }else{
                    //uppdaterar ansvarig agent
                    String uptAgent = "UPDATE Alien SET ansvarig_agent = "+agentid+" WHERE Alien_ID = "+alienid;
                    idb.update(uptAgent);
                    System.out.println("Ansvarig agent uppdaterad");
                }
                
                
                //hämtar platsid för val av ny plats från cboxen
                String valdPlats = cbxPlatser.getSelectedItem().toString();
                String[] deladPlats = valdPlats.split("-");
                String platsId = deladPlats[0];
                
                //ifall ingenting är valt händer ingenting
                if(valdPlats.equals("Välj")){
                    System.out.println("Ingen ändring plats");
                }else{
                    //uppdaterar plats
                    String uptPlats = "UPDATE Alien SET plats = "+platsId+" WHERE Alien_ID = "+alienid;
                    idb.update(uptPlats);
                    System.out.println("Plats uppdaterad");
                }
                
                
                //hämtar val av ny ras
                String valdRas = cbxRas.getSelectedItem().toString();
                
                //hämtar gamla rasen
                String nuRas = txtfNuvRas.getText();
                
                //hämtar info om attribut för ras som användaren angett
                String attribut = txtfRasAttribut.getText();
                
                
                //ifall alien inte hade tidigare ras sker ingenting
                if(nuRas.equals("Info saknas")){
                    System.out.println("Ingen förändring i gamla ras");
                }else{
                    //annars deletas den från tidigare ras för att kunna lägga in i ny ras
                    idb.delete("DELETE FROM "+nuRas+" WHERE Alien_ID = "+alienid);
                }
                
                
                //ifall ny ras inte är vald händer ingenting
                if(valdRas.equals("Välj")){
                    System.out.println("Ingen förändirng i ras");
                    
                    //ifall ny ras är worm och attribut är ifyllt
                }else if(valdRas.equals("Worm") && !attribut.isEmpty()){
                    
                    //kontroll som blir lite fel för vill ju kunna ha , eller . för cm, aja vet inte hur jag ska fixa
                    if(Validering.containsOnlyNumber(attribut) || Validering.containsAlphabet(attribut)){
                        idb.insert("INSERT INTO Worm VALUES ("+alienid+", "+attribut+")");
                        
                        //påminnelse
                    }else{
                        JOptionPane.showMessageDialog(null,"Skriv längd med siffor!");
                    }
                    
                    //ifall squid är valt och attribut är ifyllt
                }else if(valdRas.equals("Squid") && !attribut.isEmpty() ){
                    
                    //attribut enbart innehåller siffor för antal armar
                    if(Validering.containsOnlyNumber(attribut)){
                        idb.insert("INSERT INTO Squid VALUES ("+alienid+", "+attribut+")");
                    }else{
                        JOptionPane.showMessageDialog(null,"Skriv antal armar med siffor!");
                    }
                    
                    //ifall boglodite är valt och attribut är ifyllt
                }else if(valdRas.equals("Boglodite")&& !attribut.isEmpty() ){
                    
                    //kontroll att enbart siffor för antal boogies
                    if(Validering.containsOnlyNumber(attribut)){
                        idb.insert("INSERT INTO Boglodite VALUES ("+alienid+", "+attribut+")");
                    }else{
                        JOptionPane.showMessageDialog(null,"Skriv antal boogies med siffor!");
                    }
                    //annars påminnelse att ras inte ändras ifall attributfältet är tomt
                }else{
                    JOptionPane.showMessageDialog(null, "Fyll i rasattribut för att rasen ska ändras!");
                }
                
                
                
                //uppdaterar alien
                String uptAlien = "UPDATE Alien SET Namn = '"+namn+"', Losenord = '"+losen+"' WHERE Alien_ID = "+alienid;
                idb.update(uptAlien);    
                
                //bekräftelsemeddelande
                JOptionPane.showMessageDialog(null,"Alien uppdaterad med dem ändringar som var godkända!");
                
            }   
        }catch(InfException ex){
            JOptionPane.showMessageDialog(null, "Något gick fel");
            System.out.println("Internt felmed: "+ex.getMessage());
        }
        
    }//GEN-LAST:event_btnBekraftaActionPerformed

    private void btnTillbakaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTillbakaActionPerformed
        // TODO add your handling code here:
        new HanteraAliensFonster(idb).setVisible(true);
        dispose();
    }//GEN-LAST:event_btnTillbakaActionPerformed

    //metod för att få dagensdatum, används vid registreringsdatum validering
    private String dagensDatum()
    {
        String datum = LocalDate.now().toString();
        String ar = datum.substring(0, 4);
        String manad = datum.substring(5, 7);
        String dag = datum.substring(8, 10);
        System.out.println(ar + manad + dag);
        String dagensdatum = ar + manad + dag;
        return dagensdatum;
    }
    
    
    //valideringsmetod för att kontrollera ifyllt datum
    private boolean datumValidering(String datum){
        boolean stammer = false;
        
        //hämtar dagens datum
        String dagensDat = dagensDatum();
        
        //omvandlar till int
        int dagensDatum = Integer.parseInt(dagensDat);
        
        //ifall inget är ifyllt, kommer inte ändras till tomt isåfal!
        if(datum == null){
            stammer = false;
            
            //ifall datum är inmatat HELST i formen åååå-mm-dd, kan inte splitta tidigare ifall det är tomt
        }else if(datum.length() == 10){
            //splittar datum
            String[] datumFalse = datum.split("-");
            
            //delar upp i år, månad och dag som int
            int ar = Integer.parseInt(datumFalse[0]);
            int manad = Integer.parseInt(datumFalse[1]);
            int dag = Integer.parseInt(datumFalse[2]);
            
            //hela årtalet ihop
            int inputDatum = ar+manad+dag;
            
            //år kan inte vara mindre än 1900, månad 01-12, dag 01-31 och datum mindre än dagensdatum
            if(ar > 1900 && manad<13 && dag < 32 && manad != 00 && dag != 00 && inputDatum <= dagensDatum){
                stammer = true;
            }else{
                JOptionPane.showMessageDialog(null,"Något konstigt med ditt datum, kontrollera och försök igen");
            }
             
        }else{
            JOptionPane.showMessageDialog(null,"Datum måste skrivat i formatet ÅÅÅÅ-MM-DD");
        }
        return stammer;
        
    }
    
    
    //valideringsmetod för telefonnumret
    private boolean telValidering(String telefon){
        boolean stammer = false;
        
        //ifall det textfältet inte är tomt
        if(telefon != null){
            //splittar vid - 
            String[] TEL = telefon.split("-");
            
            //kontroll ifall det är inslaget på annat sätt än xxx-xxxxxx
            if(TEL.length != 2){
                JOptionPane.showMessageDialog(null,"Telefonnumret måste fyllas i enligt formatet 555-555");
            }else{
                //slår ihop numret utan -
                String telnr = TEL[0]+TEL[1];
                
                //kontroll att det bara är siffor
                if(Validering.containsOnlyNumber(telnr)){
                    stammer = true;
                }
            }
        } 
        
        return stammer;
    }
    
    
    //metod för att hämta nuvarande ras för alien
    private void getNuvarandeRas(){
        try{
            String alienid = getAlienId();
            String worm = idb.fetchSingle("SELECT Alien_ID FROM Worm WHERE Alien_ID = "+alienid);
            String squid = idb.fetchSingle("SELECT Alien_ID FROM squid WHERE Alien_ID = "+alienid);
            String bog = idb.fetchSingle("SELECT Alien_ID FROM boglodite WHERE Alien_ID = "+alienid);
            
            if(worm != null){
                txtfNuvRas.setText("Worm");
            }else if( squid != null){
                txtfNuvRas.setText("Squid");
            }else if(bog != null){
                txtfNuvRas.setText("Boglodite");
            }else{
                txtfNuvRas.setText("Info saknas");
            }
            
        }catch(InfException ex){
            JOptionPane.showMessageDialog(null,"Något gick fel");
            System.out.println("Internt felmed: "+ex.getMessage());
        }
        
    }
    
    
    //switch metod för att ändra beskrivande text för ras attribut
    private void laddaRasAttribut() {
        String ras = cbxRas.getSelectedItem().toString();
        
        
        switch (ras) {
            case "Squid":
                attributRas.setText("Antal armar:");
                attributRas.setVisible(true);
                break;
            case "Boglodite":
                attributRas.setText("Antal boogies");
                attributRas.setVisible(true);
                break;
            case "Worm":
                attributRas.setText("Längd i formen 0.00:");
                attributRas.setVisible(true);
                break;
            case "Välj":
                attributRas.setVisible(false);
        }
    }
    
    
    //metod för att ladda ansvarig agent cboxen med alla befintliga agenter
    private void laddaAgenter() {
        try {
            ArrayList<HashMap<String, String>> agentlist = idb.fetchRows("SELECT Agent_ID, Namn FROM agent");
            cbxAnsvarigAgent.removeAllItems();
            cbxAnsvarigAgent.addItem("Välj");
            for (HashMap<String, String> agent : agentlist) {
                String namn = agent.get("Namn");
                String agentid = agent.get("Agent_ID");
                cbxAnsvarigAgent.addItem(agentid+"-"+namn);
            }
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Ett fel uppstod.");
        }
    } 
    
    //metod för att ladda plats cboxen med alla befintliga platser
   private void laddaPlatser() {
        try {
            ArrayList<HashMap<String, String>> platslist = idb.fetchRows("SELECT Plats_ID, Benamning FROM plats");
            cbxPlatser.removeAllItems();
            cbxPlatser.addItem("Välj");
            for (HashMap<String, String> plats : platslist) {
                String namn = plats.get("Benamning");
                String platsid = plats.get("Plats_ID");
         
                cbxPlatser.addItem(platsid+"-"+namn);
            }
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Ett fel uppstod.");
        }
    }
    
    
    //metod för att hämta all nuvarande info om vald alien från cboxen utifrån alienid
    private void hamtaAlienInfo(){
        try{
            String alienid = getAlienId();
            
            String fraga1 = "SELECT * FROM Alien WHERE Alien_ID = "+alienid;
            HashMap<String, String> alienInfo = idb.fetchRow(fraga1);
            
            if(alienInfo != null){
                String epost = alienInfo.get("Epost");
                String datum = alienInfo.get("Registreringsdatum");
                String losen = alienInfo.get("Losenord");
                String namn = alienInfo.get("Namn");
                String telefon = alienInfo.get("Telefon");
                String plats = alienInfo.get("Plats");
                String ansagent = alienInfo.get("Ansvarig_Agent");
                
                String nuvAnsagent = idb.fetchSingle("SELECT namn FROM Agent WHERE Agent_ID = "+ansagent);
                String nuvPlats = idb.fetchSingle("SELECT benamning FROM plats WHERE Plats_ID = "+plats);
                
                txtfEpost.setText(epost);
                
                //kontroll att fält inte är tomma
                if(datum != null){
                    txtfDatum.setText(datum);
                }else{
                    txtfDatum.setText("Info saknas");
                }
                txtfLosen.setText(losen);
                txtfNamn.setText(namn);
                if(telefon != null){
                    txtfTelefon.setText(telefon);
                }else{
                    txtfTelefon.setText("Info saknas");
                }
                
                txtfNuvPlats.setText(nuvPlats);
                txtfNuvAnsAgent.setText(nuvAnsagent);
                getNuvarandeRas();
                
            }
            
            
        }catch(InfException ex){
            JOptionPane.showMessageDialog(null,"Något gick fel");
            System.out.println("Internt felmed: "+ex.getMessage());
        }
        
        
    }
    
    
    
    //metod för att få id för vald alien i cboxen
    private String getAlienId(){
        
        String alien = cbxAlien.getSelectedItem().toString();
        String[] alienInfo = alien.split("-");
        String id = alienInfo[0];
        return id;      
    }
    
    //metod för att ladda aliens i cboxen
    private void laddaAliens() {
        try {
            ArrayList<HashMap<String, String>> alienlist = idb.fetchRows("SELECT Alien_ID, Epost, Namn FROM alien");
            
            cbxAlien.removeAllItems();
            cbxAlien.addItem("Välj");
            
            for (HashMap<String, String> alien : alienlist) {
                String alienid = alien.get("Alien_ID");
                String epost = alien.get("Epost");
                String namn = alien.get("Namn");
                cbxAlien.addItem(alienid+"-"+namn + " (" + epost + ")");
            }
            
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Något gick fel.");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel attributRas;
    private javax.swing.JToggleButton btnBekrafta;
    private javax.swing.JToggleButton btnHamtaInfo;
    private javax.swing.JToggleButton btnTillbaka;
    private javax.swing.JComboBox<String> cbxAlien;
    private javax.swing.JComboBox<String> cbxAnsvarigAgent;
    private javax.swing.JComboBox<String> cbxPlatser;
    private javax.swing.JComboBox<String> cbxRas;
    private javax.swing.JLabel jLansAgent;
    private javax.swing.JLabel jLepost;
    private javax.swing.JLabel jLlosen;
    private javax.swing.JLabel jLnamn;
    private javax.swing.JLabel jLnuvAnsA;
    private javax.swing.JLabel jLnuvPlats;
    private javax.swing.JLabel jLnuvRas;
    private javax.swing.JLabel jLplats;
    private javax.swing.JLabel jLras;
    private javax.swing.JLabel jLtelefon;
    private javax.swing.JLabel jLtelefon1;
    private javax.swing.JLabel jLtitel;
    private javax.swing.JLabel jLvaljAlien;
    private javax.swing.JTextField txtfDatum;
    private javax.swing.JTextField txtfEpost;
    private javax.swing.JTextField txtfLosen;
    private javax.swing.JTextField txtfNamn;
    private javax.swing.JTextField txtfNuvAnsAgent;
    private javax.swing.JTextField txtfNuvPlats;
    private javax.swing.JTextField txtfNuvRas;
    private javax.swing.JTextField txtfRasAttribut;
    private javax.swing.JTextField txtfTelefon;
    // End of variables declaration//GEN-END:variables
}
