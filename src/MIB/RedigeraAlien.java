/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package MIB;

import java.awt.Color;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import oru.inf.InfDB;
import oru.inf.InfException;

/**
 *klass för att redigera information om alien
 * --ifall telefon och datum fält är tomma eller fel format uppdateras inte det
 * 
 * 
 * @author adamrosing & Melker
 */
public class RedigeraAlien extends javax.swing.JFrame {

    
    private InfDB idb;
    /**
     * Creates new form RegAlien
     */
    public RedigeraAlien(InfDB idb) {
        initComponents();
        this.idb = idb;
        
        //laddar alla cboxar
        laddaAliens();
        laddaPlatser();
        laddaAgenter();
        laddaRaser();
        
        setLocationRelativeTo(null);
        
        //kan inte redigera epost och inforutor om nuvarande värden
        txtfEpost.setEditable(false);
        txtfNuvRas.setEditable(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLtitel = new javax.swing.JLabel();
        jLvaljAlien = new javax.swing.JLabel();
        cbxAlien = new javax.swing.JComboBox<>();
        jLepost = new javax.swing.JLabel();
        txtfEpost = new javax.swing.JTextField();
        jLnamn = new javax.swing.JLabel();
        txtfNamn = new javax.swing.JTextField();
        jLlosen = new javax.swing.JLabel();
        txtfLosen = new javax.swing.JTextField();
        jLtelefon = new javax.swing.JLabel();
        txtfTelefon = new javax.swing.JTextField();
        jLplats = new javax.swing.JLabel();
        cbxPlatser = new javax.swing.JComboBox<>();
        jLansAgent = new javax.swing.JLabel();
        cbxAnsvarigAgent = new javax.swing.JComboBox<>();
        jLras = new javax.swing.JLabel();
        cbxRas = new javax.swing.JComboBox<>();
        attributRas = new javax.swing.JLabel();
        txtfRasAttribut = new javax.swing.JTextField();
        btnHamtaInfo = new javax.swing.JToggleButton();
        jLtelefon1 = new javax.swing.JLabel();
        txtfDatum = new javax.swing.JTextField();
        jLnuvRas = new javax.swing.JLabel();
        txtfNuvRas = new javax.swing.JTextField();
        btnBekrafta = new javax.swing.JToggleButton();
        btnTillbaka = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLtitel.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLtitel.setText("Redigera alien:");

        jLvaljAlien.setText("Välj alien:");

        cbxAlien.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbxAlien.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                cbxAlienMouseDragged(evt);
            }
        });
        cbxAlien.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxAlienActionPerformed(evt);
            }
        });

        jLepost.setText("E-post:");

        jLnamn.setText("Namn:*");

        jLlosen.setText("Lösenord:*");

        jLtelefon.setText("Telefon:*");

        jLplats.setText("Plats:");

        cbxPlatser.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLansAgent.setText("Ansvarig agent:");

        cbxAnsvarigAgent.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLras.setText("Ny Ras:");

        cbxRas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxRasActionPerformed(evt);
            }
        });

        btnHamtaInfo.setText("Hämta info");
        btnHamtaInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHamtaInfoActionPerformed(evt);
            }
        });

        jLtelefon1.setText("Registreringsdatum:*");

        jLnuvRas.setText("Nuvarande ras:");

        btnBekrafta.setText("Bekräfta");
        btnBekrafta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBekraftaActionPerformed(evt);
            }
        });

        btnTillbaka.setText("Tillbaka");
        btnTillbaka.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTillbakaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(129, 129, 129)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLtelefon1)
                            .addComponent(jLansAgent)
                            .addComponent(jLplats)
                            .addComponent(jLtelefon)
                            .addComponent(jLlosen)
                            .addComponent(jLnamn)
                            .addComponent(jLepost)
                            .addComponent(jLvaljAlien)
                            .addComponent(attributRas, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLras))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cbxAlien, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtfEpost)
                                    .addComponent(txtfNamn)
                                    .addComponent(txtfLosen)
                                    .addComponent(txtfTelefon)
                                    .addComponent(cbxPlatser, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cbxAnsvarigAgent, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cbxRas, 0, 155, Short.MAX_VALUE)
                                    .addComponent(txtfDatum)
                                    .addComponent(txtfRasAttribut, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnHamtaInfo)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(20, 20, 20)
                                        .addComponent(jLnuvRas)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtfNuvRas, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(58, 58, 58)
                                .addComponent(jLtitel))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(317, 317, 317)
                        .addComponent(btnBekrafta))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnTillbaka)))
                .addContainerGap(109, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLtitel)
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLvaljAlien)
                    .addComponent(cbxAlien, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnHamtaInfo))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLepost)
                    .addComponent(txtfEpost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLnamn)
                    .addComponent(txtfNamn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLlosen)
                    .addComponent(txtfLosen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLtelefon)
                    .addComponent(txtfTelefon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLtelefon1)
                    .addComponent(txtfDatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLplats)
                    .addComponent(cbxPlatser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLansAgent)
                    .addComponent(cbxAnsvarigAgent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLras)
                    .addComponent(cbxRas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLnuvRas)
                    .addComponent(txtfNuvRas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtfRasAttribut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(attributRas, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(btnBekrafta)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnTillbaka)
                .addContainerGap(7, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnHamtaInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHamtaInfoActionPerformed
        // TODO add your handling code here:
        
        //kontroll för att en alien är vald i cboxen 
        if(cbxAlien.getSelectedItem().toString().equals("Välj")){
            JOptionPane.showMessageDialog(null,"Välj alien för att hämta information");
        }else{
            //hämta info om alien och fyll textrutorna
            hamtaAlienInfo();
            nuvRasFarg();
        }
        
    }//GEN-LAST:event_btnHamtaInfoActionPerformed

    private void cbxRasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxRasActionPerformed
        // TODO add your handling code here:
        //ändrar beskrivande text för attribut som hör ihop med vald ras
        laddaRasAttribut();
    }//GEN-LAST:event_cbxRasActionPerformed

    private void btnBekraftaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBekraftaActionPerformed
        // TODO add your handling code here:
        
        //hämtar värden i textrutor till lokala variabler
        String namn = txtfNamn.getText();
        String losen = txtfLosen.getText();
        String telefon = txtfTelefon.getText();
        String datum = txtfDatum.getText();
        
        try{
            //hämtar id för vald alien i cboxen
            String alienid = getAlienId();
            //obligatoriska rutor är fyllda, lösen inte längre än 6 tecken och namn innehåller bokstav
            if(Validering.isTxtFilled(namn)&& Validering.isTxtFilled(losen)&&Validering.isTxtFilled(datum)&&Validering.containsAlphabet(namn)&&Validering.godkanndLosenLangd(losen) && Validering.datumValidering(datum) && Validering.telValidering(telefon)){
         
               
                String uptDatum = "UPDATE Alien SET Registreringsdatum = '"+datum+"' WHERE Alien_ID = "+alienid;
                idb.update(uptDatum);
                    
                String uptTelefon = "UPDATE Alien SET Telefon = '"+telefon+"' WHERE Alien_ID = "+alienid;
                idb.update(uptTelefon);
                    
                //uppdaterar resten via metoderna i klassen
                uppdateraAnsAgent();
                uppdateraPlats();
                uppdateraRas();
                //uppdaterar alien
                String uptAlien = "UPDATE Alien SET Namn = '"+namn+"', Losenord = '"+losen+"' WHERE Alien_ID = "+alienid;
                idb.update(uptAlien);    
                
                //bekräftelsemeddelande
                JOptionPane.showMessageDialog(null,"Alien uppdaterad!");
                
                
                //som det märks så har vi inte lyckats sätta combobox vid ras till nuvarande ras
                //därför sätter vi det automatiskt tillbaka på välj
                cbxRas.setSelectedItem("Välj");
                txtfRasAttribut.setText("");
                
                
                //för att undvika fel med gamla nuvarande ras ifall man skulle försöka börja ändra info direkt igen
                //hämtar info med nya uppdateringarna
                btnHamtaInfo.doClick();   
            }   
        }catch(InfException ex){
            JOptionPane.showMessageDialog(null, "Något gick fel");
            System.out.println("Internt felmed: "+ex.getMessage());
        }
        
    }//GEN-LAST:event_btnBekraftaActionPerformed

    private void btnTillbakaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTillbakaActionPerformed
        // TODO add your handling code here:
        new HanteraAliensFonster(idb).setVisible(true);
        dispose();
    }//GEN-LAST:event_btnTillbakaActionPerformed

    private void cbxAlienActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxAlienActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxAlienActionPerformed

    private void cbxAlienMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cbxAlienMouseDragged
      
    }//GEN-LAST:event_cbxAlienMouseDragged

  
    private void nuvRasFarg()
    {
        //lite förtydligande med uppdatering av ras med färger i textrutan
        //vid felinmatning tas rasen bort
        //inte optimalt men aja :p
        if(txtfNuvRas.getText().equals("Info saknas")){
            txtfNuvRas.setBackground(Color.red);
        }else{
            txtfNuvRas.setBackground(Color.green);
        }
    }
    
    
    private void uppdateraAnsAgent()
    {
        try{
            String alienid = getAlienId();
            //hämtar agent id från val för ansvarig agent från cboxen
            String ansAgent = cbxAnsvarigAgent.getSelectedItem().toString();
            String[] deladAgent = ansAgent.split("-");
            String agentid = deladAgent[0];

            //ifall inget är valt händer ingenting
            if(ansAgent.equals("Välj")){
                System.out.println("Ingen ändring agent");
            }else{
                //uppdaterar ansvarig agent
                String uptAgent = "UPDATE Alien SET ansvarig_agent = "+agentid+" WHERE Alien_ID = "+alienid;
                idb.update(uptAgent);
                System.out.println("Ansvarig agent uppdaterad");
            }
        }catch(InfException ex){
            JOptionPane.showMessageDialog(null,"Något gick fel vid uppdatering av ansvarig agent!");
            System.out.println(ex.getMessage());
        }
    }
    
    
    
    private void uppdateraPlats()
    {
        try{
            String alienid = getAlienId();
            //hämtar platsid för val av ny plats från cboxen
            String valdPlats = cbxPlatser.getSelectedItem().toString();
            String[] deladPlats = valdPlats.split("-");
            String platsId = deladPlats[0];

            //ifall ingenting är valt händer ingenting
            if(valdPlats.equals("Välj")){
                System.out.println("Ingen ändring plats");
            }else{
                //uppdaterar plats
                String uptPlats = "UPDATE Alien SET plats = "+platsId+" WHERE Alien_ID = "+alienid;
                idb.update(uptPlats);
                System.out.println("Plats uppdaterad");
            }
        }catch(InfException ex){
            JOptionPane.showMessageDialog(null,"Något gick fel vid uppdatering av plats");
            System.out.println(ex.getMessage());
        }
    }
    
    private void uppdateraRas()
    {
        try{
            String alienid = getAlienId();
            //hämtar val av ny ras
            String valdRas = cbxRas.getSelectedItem().toString();

            //hämtar gamla rasen
            String nuRas = txtfNuvRas.getText();

            //hämtar info om attribut för ras som användaren angett
            String attribut = txtfRasAttribut.getText();


            //ifall alien inte hade tidigare ras eller inte valt någon ny ras sker ingenting
            if(nuRas.equals("Info saknas") || valdRas.equals("Välj")){
                System.out.println("Ingen förändring i gamla ras");
            }else{
                //annars deletas den från tidigare ras för att kunna lägga in i ny ras
                idb.delete("DELETE FROM "+nuRas+" WHERE Alien_ID = "+alienid);
            }


            //ifall ny ras inte är vald händer ingenting
            if(valdRas.equals("Välj")){
                System.out.println("Ingen förändirng i ras");

                //ifall ny ras är worm och attribut är ifyllt
            }else if(valdRas.equals("Worm") && !attribut.isEmpty()){

                //kontroll att det är siffra . siffra siffra för längd hos worm
                if(Validering.korrektFormWorm(attribut)){
                    idb.insert("INSERT INTO Worm VALUES ("+alienid+", "+attribut+")");

                    //påminnelse
                }else{
                    JOptionPane.showMessageDialog(null,"Skriv längd med siffor i format 0.00!");
                }

                //ifall squid är valt och attribut är ifyllt
            }else if(valdRas.equals("Squid") && !attribut.isEmpty() ){

                //attribut enbart innehåller siffor för antal armar
                if(Validering.isHeltal(attribut)){
                    idb.insert("INSERT INTO Squid VALUES ("+alienid+", "+attribut+")");
                }else{
                    JOptionPane.showMessageDialog(null,"Skriv antal armar i heltal!");
                }

                //ifall boglodite är valt och attribut är ifyllt
            }else if(valdRas.equals("Boglodite")&& !attribut.isEmpty() ){

                //kontroll att enbart siffor för antal boogies
                if(Validering.isHeltal(attribut)){
                    idb.insert("INSERT INTO Boglodite VALUES ("+alienid+", "+attribut+")");
                }else{
                    JOptionPane.showMessageDialog(null,"Skriv antal boogies med heltal!");
                }
                //annars påminnelse att ras inte ändras ifall attributfältet är tomt
            }else{
                JOptionPane.showMessageDialog(null, "Fyll i rasattribut för att rasen ska ändras!");
            }
        }catch(InfException ex){
            JOptionPane.showMessageDialog(null,"Något fel vid uppdatering av ras!");
            System.out.println(ex.getMessage());
        }
    }
    
    //metod för att hämta nuvarande ras för alien
    private void getNuvarandeRas(){
        try{
            String alienid = getAlienId();
            String worm = idb.fetchSingle("SELECT Alien_ID FROM Worm WHERE Alien_ID = "+alienid);
            String squid = idb.fetchSingle("SELECT Alien_ID FROM squid WHERE Alien_ID = "+alienid);
            String bog = idb.fetchSingle("SELECT Alien_ID FROM boglodite WHERE Alien_ID = "+alienid);
            
            if(worm != null){
                txtfNuvRas.setText("Worm");
            }else if( squid != null){
                txtfNuvRas.setText("Squid");
            }else if(bog != null){
                txtfNuvRas.setText("Boglodite");
            }else{
                txtfNuvRas.setText("Info saknas");
            }
            
        }catch(InfException ex){
            JOptionPane.showMessageDialog(null,"Något gick fel");
            System.out.println("Internt felmed: "+ex.getMessage());
        }
        
    }
    
    
    //switch metod för att ändra beskrivande text för ras attribut
    private void laddaRasAttribut() {
        String ras = cbxRas.getSelectedItem().toString();
        
        
        switch (ras) {
            case "Squid":
                attributRas.setText("Antal armar:");
                attributRas.setVisible(true);
                break;
            case "Boglodite":
                attributRas.setText("Antal boogies");
                attributRas.setVisible(true);
                break;
            case "Worm":
                attributRas.setText("Längd i formen 0.00:");
                attributRas.setVisible(true);
                break;
            case "Välj":
                attributRas.setVisible(false);
        }
    }
    
    
    private void laddaRaser()
    {
        cbxRas.removeAllItems();
        cbxRas.addItem("Välj");
        cbxRas.addItem("Squid");
        cbxRas.addItem("Worm");
        cbxRas.addItem("Boglodite");
    }
    
    
    //metod för att ladda ansvarig agent cboxen med alla befintliga agenter
    private void laddaAgenter() {
        try {
            ArrayList<HashMap<String, String>> agentlist = idb.fetchRows("SELECT Agent_ID, Namn FROM agent");
            cbxAnsvarigAgent.removeAllItems();
            cbxAnsvarigAgent.addItem("Välj");
            for (HashMap<String, String> agent : agentlist) {
                String namn = agent.get("Namn");
                String agentid = agent.get("Agent_ID");
                cbxAnsvarigAgent.addItem(agentid+"-"+namn);
            }
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Ett fel uppstod.");
        }
    } 
    
    //metod för att ladda plats cboxen med alla befintliga platser
   private void laddaPlatser() {
        try {
            ArrayList<HashMap<String, String>> platslist = idb.fetchRows("SELECT Plats_ID, Benamning FROM plats");
            cbxPlatser.removeAllItems();
            cbxPlatser.addItem("Välj");
            for (HashMap<String, String> plats : platslist) {
                String namn = plats.get("Benamning");
                String platsid = plats.get("Plats_ID");
         
                cbxPlatser.addItem(platsid+"-"+namn);
            }
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Ett fel uppstod.");
        }
    }
    
    
    //metod för att hämta all nuvarande info om vald alien från cboxen utifrån alienid
    private void hamtaAlienInfo(){
        try{
            String alienid = getAlienId();
            
            String fraga1 = "SELECT * FROM Alien WHERE Alien_ID = "+alienid;
            HashMap<String, String> alienInfo = idb.fetchRow(fraga1);
            
            if(alienInfo != null){
                String epost = alienInfo.get("Epost");
                String datum = alienInfo.get("Registreringsdatum");
                String losen = alienInfo.get("Losenord");
                String namn = alienInfo.get("Namn");
                String telefon = alienInfo.get("Telefon");
                String plats = alienInfo.get("Plats");
                String ansagent = alienInfo.get("Ansvarig_Agent");
                
                String nuvAnsagent = idb.fetchSingle("SELECT namn FROM Agent WHERE Agent_ID = "+ansagent);
                String nuvPlats = idb.fetchSingle("SELECT benamning FROM plats WHERE Plats_ID = "+plats);
                
                //uppdatera comboboxar
                if (plats != null && !plats.trim().isEmpty()) {
                    setCbxToValue(cbxPlatser, plats);
                }
                
                if(ansagent != null && !ansagent.trim().isEmpty()) {
                    setCbxToValue(cbxAnsvarigAgent, ansagent);
                }
                
                txtfEpost.setText(epost);
                
                //kontroll att fält inte är tomma
                if(datum != null){
                    txtfDatum.setText(datum);
                }else{
                    txtfDatum.setText("Info saknas");
                }
                txtfLosen.setText(losen);
                txtfNamn.setText(namn);
                if(telefon != null){
                    txtfTelefon.setText(telefon);
                }else{
                    txtfTelefon.setText("Info saknas");
                }
                getNuvarandeRas();
                
            }
            
            
        }catch(InfException ex){
            JOptionPane.showMessageDialog(null,"Något gick fel");
            System.out.println("Internt felmed: "+ex.getMessage());
        }
        
        
    }
    
        //Denna metod används för att kunna uppdatera comboboxarna när man vill hämta information om en alien, till exempel väljer du en alien som har Agent Z som ansvarar en kommer Agent Z direkt upp i comboboxen när man väljer hen.
    private void setCbxToValue(JComboBox<String> comboBox, String ID) {
        for (int i = 0; i < comboBox.getItemCount(); i++) {
            String item = comboBox.getItemAt(i).toString();
            if(item.startsWith(ID + "-")) {
                comboBox.setSelectedIndex(i);
                break;
            }
        }
    }
    
    //metod för att få id för vald alien i cboxen
    private String getAlienId(){
        
        String alien = cbxAlien.getSelectedItem().toString();
        String[] alienInfo = alien.split("-");
        String id = alienInfo[0];
        return id;      
    }
    
    //metod för att ladda aliens i cboxen
    private void laddaAliens() {
        try {
            ArrayList<HashMap<String, String>> alienlist = idb.fetchRows("SELECT Alien_ID, Epost, Namn FROM alien");
            
            cbxAlien.removeAllItems();
            cbxAlien.addItem("Välj");
            
            for (HashMap<String, String> alien : alienlist) {
                String alienid = alien.get("Alien_ID");
                String epost = alien.get("Epost");
                String namn = alien.get("Namn");
                cbxAlien.addItem(alienid+"-"+namn + " (" + epost + ")");
            }
            
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Något gick fel.");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel attributRas;
    private javax.swing.JToggleButton btnBekrafta;
    private javax.swing.JToggleButton btnHamtaInfo;
    private javax.swing.JToggleButton btnTillbaka;
    private javax.swing.JComboBox<String> cbxAlien;
    private javax.swing.JComboBox<String> cbxAnsvarigAgent;
    private javax.swing.JComboBox<String> cbxPlatser;
    private javax.swing.JComboBox<String> cbxRas;
    private javax.swing.JLabel jLansAgent;
    private javax.swing.JLabel jLepost;
    private javax.swing.JLabel jLlosen;
    private javax.swing.JLabel jLnamn;
    private javax.swing.JLabel jLnuvRas;
    private javax.swing.JLabel jLplats;
    private javax.swing.JLabel jLras;
    private javax.swing.JLabel jLtelefon;
    private javax.swing.JLabel jLtelefon1;
    private javax.swing.JLabel jLtitel;
    private javax.swing.JLabel jLvaljAlien;
    private javax.swing.JTextField txtfDatum;
    private javax.swing.JTextField txtfEpost;
    private javax.swing.JTextField txtfLosen;
    private javax.swing.JTextField txtfNamn;
    private javax.swing.JTextField txtfNuvRas;
    private javax.swing.JTextField txtfRasAttribut;
    private javax.swing.JTextField txtfTelefon;
    // End of variables declaration//GEN-END:variables
}
