/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package MIB;

import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JOptionPane;
import oru.inf.InfDB;
import oru.inf.InfException;

/**
 *klass som tar bort agent ur databasen
 * 
 * 
 * @author adamrosing
 */
public class TaBortAgentFonster extends javax.swing.JFrame {

    private InfDB idb;
    private int nyID;
    /**
     * Creates new form TaBortAgentFonster
     */
    public TaBortAgentFonster(InfDB idb) {
        initComponents();
        this.idb = idb;
        setLocationRelativeTo(null);
        laddaAgenter();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLtitel = new javax.swing.JLabel();
        jLvalAgent = new javax.swing.JLabel();
        cbxAgenter = new javax.swing.JComboBox<>();
        btnTabort = new javax.swing.JButton();
        btnTillbaka = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLtitel.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLtitel.setText("Ta bort agent:");

        jLvalAgent.setText("Välj agent:");

        cbxAgenter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnTabort.setText("Bekräfta");
        btnTabort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTabortActionPerformed(evt);
            }
        });

        btnTillbaka.setText("Tillbaka");
        btnTillbaka.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTillbakaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(137, 137, 137)
                        .addComponent(jLtitel, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addComponent(jLvalAgent)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnTabort)
                            .addComponent(cbxAgenter, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnTillbaka)))
                .addContainerGap(124, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLtitel)
                .addGap(82, 82, 82)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLvalAgent)
                    .addComponent(cbxAgenter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                .addComponent(btnTabort)
                .addGap(27, 27, 27)
                .addComponent(btnTillbaka)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnTabortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTabortActionPerformed
        // TODO add your handling code here:
        
        //man ska inte kunna ta bort sig själv
        if(getAgentID().equals(InlogAgent.getAgentId())){
            JOptionPane.showMessageDialog(null,"Du får inte ta bort dig själv ur systemet!");
        }else{
            taBortAgent();
            cbxAgenter.removeAllItems();
            laddaAgenter();
        }
        
    }//GEN-LAST:event_btnTabortActionPerformed

    private void btnTillbakaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTillbakaActionPerformed
        // TODO add your handling code here:
        new HanteraAgentAdmin(idb).setVisible(true);
        dispose();
    }//GEN-LAST:event_btnTillbakaActionPerformed

    
//metod för att ladda in alla agenter från databasen till cboxen
private void laddaAgenter() {
    try {
        ArrayList<HashMap<String, String>> agentlist = idb.fetchRows("SELECT Agent_ID, Namn, Epost FROM agent");
        cbxAgenter.removeAllItems();
        for(HashMap<String, String> agent : agentlist) {
            String agentid = agent.get("Agent_ID");
            String namn = agent.get("Namn");
            String epost = agent.get("Epost");
            cbxAgenter.addItem(agentid+"-"+namn +" ("+epost+")");
            
            }
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Ett fel uppstod.");
        }
    }


//metod som hämtar id från vald agent i cboxen
private String getAgentID(){
    String agentInfo = cbxAgenter.getSelectedItem().toString();
    String[] info = agentInfo.split("-");
    String id = info[0];
    return id;
}



//metod som bestämmer vilken agent som ska ta över som ansvarig_agent
//och kontorschef ifall den agenten man tar bort hade ansvar
private void nyAgentAnsvar()
{
    String delAgent = getAgentID();
    int nuAgent = Integer.parseInt(delAgent);
    
    try{
        //hämtar alla Agent_ID från databasen
        ArrayList<String> agenter = idb.fetchColumn("SELECT Agent_ID FROM Agent");
        
        //kontrollerar varje agentid i databasen
        for(int i=0; i<agenter.size();i++){
            String nyttId = agenter.get(i);
            int id = Integer.parseInt(nyttId);
            
            //ifall agenten du vill ta bort inte är samma som ett agent_id i databasen 
            //blir nyID det agent_id och sen också kontorschef/ansvarig_agent
            if(nuAgent != id){
                nyID = id;
             
            //annars blir den inloggade agenten ansvarig_agent/kontorschef
            //vilket skulle betyda att det är den sista agenten i databasen
            }else{
                int inAid = Integer.parseInt(InlogAgent.getAgentId());
                nyID = inAid;
            }
        }
    }catch(InfException ex){
        JOptionPane.showMessageDialog(null,"Något gick fel");
        System.out.println("Internt felmed: "+ex.getMessage());
    }
}


//metod för att ta bort agent / uppdatera kontorschef/ansvarig_agent
private void taBortAgent()
{
    
    nyAgentAnsvar();
    String delAgent = getAgentID();
    
    boolean fungerar = false;
    
    String fragaAnsA = "SELECT ansvarig_agent FROM Alien WHERE ansvarig_agent = "+delAgent;
    
    String fragaArChef = "SELECT Agent_ID FROM kontorschef WHERE Agent_ID = "+delAgent;
    
    String fragaArNyChef = "SELECT Agent_ID FROM kontorschef WHERE Agent_ID = "+nyID;
    
    try{
        String svarAnsA = idb.fetchSingle(fragaAnsA);
        
        String svarArC = idb.fetchSingle(fragaArChef);
        
        String svarArNyC = idb.fetchSingle(fragaArNyChef);
        
        
        //ifall den agenten man vill ta bort är kontorschef
        if(svarArC != null){
            
            //ifall den nya agenten också är kontorschef så ska det inte fungera
            //eftersom man inte vill ta bort hela kontoret bara för man tar bort agenten
            //antar jag?
            if(svarArNyC !=null){
                JOptionPane.showMessageDialog(null,"Agenten kan inte tas bort eftersom den är kontorschef och det finns ingen som kan ta över uppdraget just nu!");   
            }else{
                //kontroll värde 
               fungerar = true; 
            }
        }else{
            //kontroll värde
            fungerar = true;
        }
        
        //ifall kontorschefs kontroll är ok
        if(fungerar){
                
                String updKntr = "UPDATE kontorschef SET Agent_ID = "+nyID+" WHERE Agent_ID = "+delAgent;
                
                //ifall agenten man vill ta bort är ansvarig agent för en alien ska det uppdateras till den nya
                if(svarAnsA != null){
                    String upd = "UPDATE Alien SET ansvarig_agent = "+nyID+" WHERE ansvarig_agent = "+delAgent;
                    idb.update(upd);
                }
                
                String delInUtr = "DELETE FROM innehar_utrustning WHERE Agent_ID = "+delAgent;
                String delOmrC = "DELETE FROM omradeschef WHERE Agent_ID = "+delAgent;
                String delFaltA = "DELETE FROM faltagent WHERE Agent_ID = "+delAgent;
                String delAgen = "DELETE FROM Agent WHERE Agent_ID = "+delAgent;
                
                
                //uppdaterar kontorschef
                idb.update(updKntr);
                
                //tar bort innehavd utrustning
                idb.delete(delInUtr);
                
                //tar bort områdeschef
                idb.delete(delOmrC);
                
                //tar bort fältagent
                idb.delete(delFaltA);
                
                //tar bort agenten
                idb.delete(delAgen);
                
                JOptionPane.showMessageDialog(null, "Agenten har raderats!");
                
            }else{
                JOptionPane.showMessageDialog(null,"Agenten kunde inte tas bort");
        }
            
        
    }catch(InfException ex){
        JOptionPane.showMessageDialog(null,"Något gick fel");
        System.out.println("Internt felmed: "+ex.getMessage());
    }
    
}



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnTabort;
    private javax.swing.JToggleButton btnTillbaka;
    private javax.swing.JComboBox<String> cbxAgenter;
    private javax.swing.JLabel jLtitel;
    private javax.swing.JLabel jLvalAgent;
    // End of variables declaration//GEN-END:variables
}
